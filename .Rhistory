orangejuice
blu <- read.csv('/Users/JL/ShareFile/CrowdTwist/data_team/from_clients/[Book1]blu_all_jan_purch')
library(ggplot2)
library(ggplot2)
blu <- read.csv(r'/Users/JL/ShareFile/CrowdTwist/data_team/from_clients/[Book1]blu_all_jan_purch')
blu <- read.csv('/Users/JL/ShareFile/CrowdTwist/data_team/from_clients/[Book1]blu_all_jan_purch')
'
'
head(blu)
blu <- read.csv('/Users/JL/ShareFile/CrowdTwist/data_team/from_clients/blu_jan_purch.csv')
head(blu)
head(blu, 40)
length(blu)
rnum(blu)
nrow(blu)
library(plyr)
ddply(blu, .('Customer.Name', 'Product.SKU', sum('Quantity.Purchased')))
ddply(blu, .('Customer.Name', 'Product.SKU'), sum('Quantity.Purchased'))
# purchases by SKU's, including current packs with starter kits
ddply(blu,
.('Customer.Name', 'Product.SKU'),
summarize,
units = sum('Quantity.Purchased'),
trans =length('Quantity.Purchased')
)
?as.Numeric
?as.Number
?as.number
?as_number
?int
?as.integer
# purchases by SKU's, including current packs with starter kits
ddply(blu,
.('Customer.Name', 'Product.SKU'),
summarize,
units = sum(as.integer('Quantity.Purchased')),
trans = length('Quantity.Purchased')
)
# purchases by SKU's, including current packs with starter kits
ddply(blu,
.(Customer.Name, Product.SKU),
summarize,
units = sum(as.integer('Quantity.Purchased')),
trans = length('Quantity.Purchased')
)
all.purch <-
ddply(blu,
.(Customer.Name, Product.SKU),
summarize,
units = sum(as.integer('Quantity.Purchased')),
trans = length('Quantity.Purchased')
)
)
head(all.purch)
?as.float
?as.number
?as.numeric
all.purch <-
ddply(blu,
.(Customer.Name, Product.SKU),
summarize,
units = sum(as.numeric('Quantity.Purchased')),
trans = length('Quantity.Purchased')
)
View(all.purch)
?read.csv
inc <- read.csv("../CUNY_IS608/lecture1/data")
library(ggplot2)
inc <- read.csv("../CUNY_IS608/lecture1/data/inc5000_data.csv")
getwd()
setwd("/Users/JL/Dropbox/CUNY/CUNY_IS608")
inc <- read.csv("lecture1/data/inc5000_data.csv")
numCols(ins)
numCols(inc)
NumCols(inc)
colNum(inc)
colNums(inc)
colnames(inc)
rNum(inc)
nrows(inc)
nrow(inc)
inc[0,]
inc <- read.csv("lecture1/data/inc5000_data.csv", header= TRUE)
inc[0,]
inc[1,]
head(inc)
library(pylr)
library(plyr)
?ddply
# aggregate by state
states <- ddply(inc,
.(State),
summarize,
size   = round(mean(Employees), 2),
growth = round(mean(Growth_Rate), 2),
rev_per_employee = round(mean(Revenue/Employees),2)
)
states
states <- ddply(inc,
.(State),
summarize,
count  = round(mean(nrows(State)), 2),
size   = round(mean(Employees), 2),
growth = round(mean(Growth_Rate), 2),
rev_per_employee = round(mean(Revenue/Employees),2)
)
states <- ddply(inc,
.(State),
summarize,
count  = round(mean(nrow(State)), 2),
size   = round(mean(Employees), 2),
growth = round(mean(Growth_Rate), 2),
rev_per_employee = round(mean(Revenue/Employees),2)
)
warnings()
states <- ddply(inc,
.(State),
summarize,
count  = round(mean(length(State)), 2),
size   = round(mean(Employees), 2),
growth = round(mean(Growth_Rate), 2),
rev_per_employee = round(mean(Revenue/Employees),2)
)
states
head(inc)
?complete.cases
all_inc <- inc[complete.cases(inc)==TRUE,0]
states <- ddply(all_inc,
.(State),
summarize,
count  = round(mean(length(State)), 2),
size   = round(mean(Employees), 2),
growth = round(mean(Growth_Rate), 2),
rev_per_employee = round(mean(Revenue/Employees),2)
)
states
all_inc
complete.cases(inc)
all_inc <- inc[complete.cases(inc)==TRUE,]
all_inc
# aggregate by state
states <- ddply(all_inc,
.(State),
summarize,
count  = round(mean(length(State)), 2),
size   = round(mean(Employees), 2),
growth = round(mean(Growth_Rate), 2),
rev_per_employee = round(mean(Revenue/Employees),2)
)
states
lrg_state <- states[states$count >= 10,]
lrg_state
lrg_states <- states[states$count >= 10,]
lrg_states
lrg_states <- states[states$count >= 10,]
lrg_states
geom_bar
?geom_bar
head(inc)
# aggregate by state
states <- ddply(all_inc,
.(State, Industry),
summarize,
count  = round(mean(length(State)), 2),
size   = round(mean(Employees), 2),
growth = round(mean(Growth_Rate), 2),
rev_per_employee = round(mean(Revenue/Employees),2)
)
# head(states)
head(states)
inc <- read.csv("lecture1/data/inc5000_data.csv", header= TRUE)
# head(inc)
all_inc <- inc[complete.cases(inc)==TRUE,]
p <- ggplot(all_inc, aes(x=State)) + geom_bar(stat='identity')
p
?geom_bar
head(inc)
p <- ggplot(all_inc, aes(x=factor(State), y=Rank) + geom_bar(stat='identity')
p
p <- ggplot(all_inc, aes(x=factor(State))) + geom_bar(stat='identity')
p
p <- ggplot(all_inc, aes(x=factor(State), y=Rank)) + geom_bar(stat='identity')
p
p <- ggplot(all_inc, aes(x=factor(State), y=count)) + geom_bar(stat='identity')
p
?geom_bar
p <- ggplot(all_inc, aes(x=factor(State), y=State)) + geom_bar(stat='identity')
p
p <- ggplot(all_inc, aes(x=State, y=State)) + geom_bar(stat='identity')
p
?geom_bar
cnt <- ddply(all_inc, .(State), summarize, cnt = length(State))
p <- ggplot(cnt, aes(x=State, y=cnt)) + geom_bar(stat='identity')
p
p <- ggplot(cnt, aes(x=State, y=cnt)) + geom_bar(stat='identity') + coord_flip()
p
st_ind <- ddply(all_inc,
.(State, Industry),
summarize,
count  = round(mean(length(State)), 2),
size   = round(mean(Employees), 2),
growth = round(mean(Growth_Rate), 2),
rev_per_employee = round(mean(Revenue/Employees),2)
)
# head(states)
st_ind_lrg <- st_ind[st_ind$count >= 5,]
st_ind_lrg
?box_plot
_plot
?geom_box
?geom_point
?geom_boxplot
p
# aggregate by state ?sort
?sort
cnt <- sort[sort(cnt$cnt),]
cnt <- cnt[sort(cnt$cnt),]
p <- ggplot(cnt, aes(x=State, y=cnt)) + geom_bar(stat='identity') + coord_flip()
p
cnt <- ddply(all_inc, .(State), summarize, cnt = length(State))
cnt
sort(cnt$cnt)
?order
cnt <- cnt[order(cnt$cnt),]
p <- ggplot(cnt, aes(x=State, y=cnt)) + geom_bar(stat='identity') + coord_flip()
p
order(cnt$cnt)
cnt$cnt
cnt
all_inc <- inc[complete.cases(inc)==TRUE,]
# aggregate by state ?order
cnt <- ddply(all_inc, .(State), summarize, cnt = length(State))
cnt <- cnt[-order(cnt$cnt),]
p <- ggplot(cnt, aes(x=State, y=cnt)) + geom_bar(stat='identity') + coord_flip()
p
cnt
cnt <- ddply(all_inc, .(State), summarize, cnt = length(State))
cnt <- cnt[-order(cnt$cnt)]
p <- ggplot(cnt, aes(x=State, y=cnt)) + geom_bar(stat='identity') + coord_flip()
p
cnt
-order(cnt$cnt)
cnt <- ddply(all_inc, .(State), summarize, cnt = length(State))
order(cnt$cnt)
cnt
-order(cnt$cnt)
cnt <- cnt[order(-cnt$cnt),]
cnt
p <- ggplot(cnt, aes(x=State, y=cnt)) + geom_bar(stat='identity') + coord_flip()
p
p <- ggplot(cnt, aes(x=State, y=cnt)) + geom_bar(stat='identity')
p
?geom_bar
ny <- subset(all_inc, State == 'NY')
ny
ny <- subset(all_inc, State == 'NY')
ny
head(ny)
p <- ggplot(ny, aes(x=Industry, y=Employees)) + geom_boxplot()
p
p <- ggplot(ny, aes(x=Industry, y=Employees)) + geom_boxplot() +coord_flip()
p
ny$clip_employ <- min(ny$Employees,1000)
p <- ggplot(ny, aes(x=Industry, y=clip_employ)) + geom_boxplot() + coord_flip()
p
ny <- subset(all_inc, State == 'NY')
ny$clip_employ <- min(ny$Employees,1000)
ny
ny <- subset(all_inc, State == 'NY')
ny
ny$clip_employ <- min(ny$Employees,1000)
p <- ggplot(ny, aes(x=Industry, y=clip_employ)) + geom_boxplot() + coord_flip()
ny
clip(x, bot=0, top) <- function(){return min(top, max(x, bot))}
clip(x, bot=0, top=0) <- function(){ return min(top, max(x, bot)) }
clip <- function(x, bot=0, top=0){ return min(top, max(x, bot)) }
clip <- function(x, bot=0, top=1){ return min(top, max(x, bot)) }
min(2,5)
clip(x, bot=0, top=1) <- function () { return min(top, max(x, bot)) }
clip(x, bot=0, top=1) <- function(x, bot=0, top=1)  { return min(top, max(x, bot)) }
?clip
windsor(x, bot=0, top=1) <- function(x, bot=0, top=1)  { return min(top, max(x, bot)) }
windsor <- function(x, bot=0, top=1)  { return min(top, max(x, bot)) }
windsor <- function(x, bot, top)  { return min(top, max(x, bot)) }
?winsor
?windsor
windsor <- function(x, bot, top)  { return(min(top, max(x, bot))) }
ny$clip_employ <- sapply(ny$Employees, windsor, bot=0, top =1000)
p <- ggplot(ny, aes(x=Industry, y=clip_employ)) + geom_boxplot() + coord_flip()
p
ny$clip_employ <- sapply(ny$Employees, windsor, bot=0, top =10000)
p <- ggplot(ny, aes(x=Industry, y=clip_employ)) + geom_boxplot() + coord_flip()
p
ny$clip_employ <- sapply(ny$Employees, windsor, bot=0, top =1000)
p <- ggplot(ny, aes(x=Industry, y=clip_employ)) + geom_boxplot() + coord_flip()
p
p + ylim(0,1000) + coord_flip()
p <- ggplot(ny, aes(x=Industry, y=Employees)) + geom_boxplot()
p + ylim(0,1000) + coord_flip()
p
p + ylim(0,1000) + coord_flip()
p + ylim(0,900) + coord_flip()
p + ylim(0,1000) + coord_flip()
p + ylim(0,5000) + coord_flip()
p + ylim(0,10000) + coord_flip()
p + ylim(0,100) + coord_flip()
p + ylim(0,10000) + coord_flip()
p + ylim(0,1000) + coord_flip()
p + ylim(0,5000) + coord_flip()
boxplot.stats(ny$Employees)$stats[c(1, 5)]
ny$Employees
boxplot.stats(ny$Employees)$stats
ylim1 <- boxplot.stats(ny$Employees)$stats[c(1, 5)]
# scale y limits based on ylim1
p <- + coord_cartesian(ylim = ylim1*1.05)
p <- p + coord_cartesian(ylim = ylim1*1.05)
p
p + coord_flip()
p <- p + coord_cartesian(ylim = ylim1*1.05)
p + coord_flip()
p <- ggplot(ny, aes(x=Industry, y=Employees)) + geom_boxplot()
# compute lower and upper whiskers
ylim1 <- boxplot.stats(ny$Employees)$stats[c(1, 5)]
# scale y limits based on ylim1
p <- p + coord_cartesian(ylim = ylim1*1.05)
p + coord_flip()
ylim1
ylim1
ylim1*1.05
p <- ggplot(ny, aes(x=Industry, y=Employees)) + geom_boxplot()
p + coord_flip()
ylim1 <- boxplot.stats(ny$Employees)$stats[c(1, 5)]
# scale y limits based on ylim1
p <- p + coord_cartesian(ylim = ylim1*1.05)
p + coord_flip()
# aggregate by state & industry
p
ny$Employees
p <- p + coord_cartesian(ylim = ylim1*2)
p
p <- p + coord_cartesian(ylim = ylim1*5)
p
p <- p + coord_cartesian(ylim = ylim1*3)
p
p <- p + coord_cartesian(ylim = ylim1*4)
p
p <- ggplot(ny, aes(x=Industry, y=Employees)) + geom_boxplot()
# compute lower and upper whiskers
xlim1 <- boxplot.stats(ny$Employees)$stats[c(1, 5)]
# scale y limits based on ylim1
p <- p + coord_flip() + coord_cartesian(xlim = xlim1*4)
p
p <- p + coord_cartesian(xlim = xlim1*4)
p
ylim1 <- boxplot.stats(ny$Employees)$stats[c(1, 5)]
# scale y limits based on ylim1
p <- p + coord_cartesian(ylim = ylim1*4)
p
p + coord_flip()
p + coord_flip(xlim = ylim1*4)
p <- ggplot(ny, aes(x=Industry, y=Employees)) + geom_boxplot()
# compute lower and upper whiskers
ylim1 <- boxplot.stats(ny$Employees)$stats[c(1, 5)]
# scale y limits based on ylim1
#p <- p + coord_cartesian(ylim = ylim1*4)
p + coord_flip(xlim = ylim1*4)
# aggregate by state & industry
?last_plot()
p <- ggplot(ny, aes(x=Industry, y=Employees)) + geom_boxplot()
# compute lower and upper whiskers
ylim1 <- boxplot.stats(ny$Employees)$stats[c(1, 5)]
# scale y limits based on ylim1
p <- p + coord_cartesian(ylim = ylim1*4)
p
last_plot() + coord_flip(xlim = ylim1*4)
p
last_plot() + coord_flip()
p + coord_flip(ylim(0,1000))
p <- ggplot(ny, aes(x=Industry, y=Employees)) + geom_boxplot()
# compute lower and upper whiskers
ylim1 <- boxplot.stats(ny$Employees)$stats[c(1, 5)]
# scale y limits based on ylim1
p + coord_flip(ylim(0,1000))
p + coord_flip(ylim=c(0,1000))
p + coord_flip(ylim=c(0,100))
p + coord_flip(ylim=c(0,1000))
library(ggplot2)
library(plyr)
blu <- read.csv('/Users/JL/ShareFile/CrowdTwist/data_team/from_clients/blu_jan_purch.csv')
head(blu, 40)
head(blu, 30)
all.purch <-
ddply(blu,
.(Customer.Name, Product.SKU, Product.Name),
summarize,
units = sum(as.numeric('Quantity.Purchased')),
trans = length('Quantity.Purchased')
)
warnings()
head(blu, 30)
complete.cases(blu)
sum(complete.cases(blu))
head(blu, 30)
ddply(blu,
.(Customer.Name, Product.SKU, Product.Name),
summarize,
units = sum('Quantity.Purchased'),
trans = length('Quantity.Purchased')
)
?as.numeric
ddply(blu,
.(Customer.Name, Product.SKU, Product.Name),
summarize,
units = sum(Quantity.Purchased),
trans = length(Quantity.Purchased)
)
all.purch <-
ddply(blu,
.(Customer.Name, Product.SKU, Product.Name),
summarize,
units = sum(as.numeric(Quantity.Purchased)),
trans = length(Quantity.Purchased)
)
ddply(blu,
.(Customer.Name, Product.SKU, Product.Name),
summarize,
units = sum(as.numeric(Quantity.Purchased)),
trans = length(Quantity.Purchased)
)
smb <- head(blu, 30)
ddply(smb,
.(Customer.Name, Product.SKU, Product.Name),
summarize,
units = sum(as.numeric(Quantity.Purchased)),
trans = length(Quantity.Purchased)
)
smb <- head(blu, 100)
ddply(smb,
.(Customer.Name, Product.SKU, Product.Name),
summarize,
units = sum(as.numeric(Quantity.Purchased)),
trans = length(Quantity.Purchased)
)
smb <- head(blu, 1000)
ddply(smb,
.(Customer.Name, Product.SKU, Product.Name),
summarize,
units = sum(as.numeric(Quantity.Purchased)),
trans = length(Quantity.Purchased)
)
all.purch <-
ddply(blu,
.(Customer.Name, Product.SKU),
summarize,
units = sum(as.numeric(Quantity.Purchased)),
trans = length(Quantity.Purchased)
)
head(all.purch)
sorted.purch <- all.purch[order(all.purch$units),]
head(sorted.purch)
sorted.purch <- all.purch[order(-all.purch$units),]
head(sorted.purch)
head(sorted.purch, 30)
head(sorted.purch, 50)
head(sorted.purch, 80)
head(sorted.purch, 100)
?find
?grep
grep('pack', 'pack-tobacco')
grep('ck', 'pack-tobacco')
grep('ck', 'pac-tobacco')
packs <- subset(all.purch, grep('pack', Product.SKU)==1)
ggplot(packs, aes(x=units)) + geom_hist()
ggplot(packs, aes(x=units)) + geom_histogram()
ggplot(packs, aes(x=units)) + geom_histogram(stat="identity")
ggplot(packs, aes(x=units,y=units)) + geom_histogram()
ggplot(packs, aes(x=Customer.Name,y=units)) + geom_histogram()
p <- ggplot(packs, aes(x=Customer.Name,y=units)) + geom_histogram()
p
p <- ggplot(packs, aes(x=trans,y=units)) + geom_point()
p
head(packs)
head(sorted.purch, 100)
?instr
?in.string
?grep
?find
library(stringr)
grep('pack', 'apack', fixed=TRUE)
grep('pack', 'apaack', fixed=TRUE)
grep('pack', 'aapack', fixed=TRUE)
regexpr('pack', 'aapack', fixed=TRUE)
regexpr('pack', 'aapack')
regexpr('pack', 'aapack')[1]
regexpr('pack', 'aaasdfpack')[1]
regexpr('pack', 'aaasdfpck')[1]
packs <- subset(all.purch, regexpr('pack', Product.SKU)>=0)
p <- ggplot(packs, aes(x=trans,y=units)) + geom_point()
p
p <- ggplot(packs, aes(x=units)) + geom_histogram()
p
p + xlim(c(0,20))
p <- ggplot(packs, aes(x=units/trans)) + geom_histogram()
p + xlim(c(0,20))
packs$ave <- packs$units/packs$trans
p <- ggplot(packs, aes(x=ave)) + geom_line()
p + xlim(c(0,20))
p <- ggplot(packs, aes(x=ave)) + geom_histogram()
p + xlim(c(0,20))
p + xlim(c(0,30))
head(packs)
head(packs,20)
