using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using System.Web.Http.Cors;
using DF.DataAccess;
using System.Runtime.Caching;
using DF.Web.CacheManager;
using DF.Web.Logging;
using Newtonsoft.Json.Linq;

namespace DF.Web.Controllers.APIControllers
{
    /// <summary>
    /// Web API controller for daily fantasy metrics/lineups
    /// Provides access to all players' DFS projections for a given day
    /// as well as the calculated optimal FanDuel and DraftKings lineups
    /// </summary>
    public class DFSController : ApiController
    {
        devEntities _context = new devEntities();
        ICacheManager _cacheManager;
        ILogManager _logManager;

        /// <summary>
        /// Controller constructor with injected dependencies
        /// </summary>
        /// <param name="cacheManager">Caching implementation delegated to this injected manager class.</param>
        /// <param name="logManager">Error logging provided through this injected implementation.</param>
        public DFSController(ICacheManager cacheManager, ILogManager logManager)
        {
            this._cacheManager = cacheManager;
            this._logManager = logManager;
        }

        /// <summary>
        /// Gets DFS report
        /// Contains prices and contextual DFS projections
        /// for all players in the DangleFactory universe
        /// </summary>
        /// <returns></returns>
        [HttpGet]
        [Route("api/fantasytools/histdfsplayers")]
        [EnableCors(origins: "*", headers: "*", methods: "*")]
        public dynamic GetHistoricalDFSPlayers()
        {
            dynamic ret = new object();

            try
            {
                // Generic Type generated by Entity Framework
                List<vu_DFSHistoricalPlayers> histPlayers = new List<vu_DFSHistoricalPlayers>();//this._context.vu_DFSHistoricalPlayers.ToList(); 

                //// Attempt to get cached version of report
                histPlayers = this._cacheManager.GetCachedItem(this._cacheManager.DFSHistPlayersKey) as List<vu_DFSHistoricalPlayers>;

                //// If object not in cache, fetch it from DB and then cache result for subsequent calls
                if (histPlayers == null)
                {
                    histPlayers = this._context.vu_DFSHistoricalPlayers.ToList();
                    this._cacheManager.CacheItem(this._cacheManager.DFSHistPlayersKey, histPlayers);
                }

                List<dtoHistoricalPlayers> tPlayers = new List<dtoHistoricalPlayers>();

                histPlayers.ForEach(p => tPlayers.Add(new dtoHistoricalPlayers { label = p.Name, value = p.playerid.ToString() }));

                // return dynamic object (annonymous classes map fine to JSON)
                return new
                {
                    HistoricalPlayers = tPlayers
                };
            }
            catch (Exception ex)
            {
                // Log exception, if any
                this._logManager.LogError("DFS Report Service Error. Ex - " + ex.Message);
                return null;
            }

        }

        [HttpPost]
        [Route("api/fantasytools/histdfsplayerreport")]
        [EnableCors(origins: "*", headers: "*", methods: "*")]
        public dynamic GetDFSPlayerReport(JObject data)
        {
            try
            {
                dynamic json = data;
                int playerID = ((int)json.PlayerID);

                var reportData = this._context.vu_DFSHistoricalReport.Where(p => p.playerid == playerID).OrderBy(p => p.Date).ToList();

                var playerName = reportData.First().Name;

                return new { Name = playerName, TimeSeries = reportData };
            }
            catch (Exception ex)
            {
                // Log exception, if any
                this._logManager.LogError("DFS Report Service Error. Ex - " + ex.Message);
                return null;
            }
        }

        [HttpPost]
        [Route("api/fantasytools/histdfsmultiplayerreport")]
        [EnableCors(origins: "*", headers: "*", methods: "*")]
        public dynamic GetDFSMultiPlayerReport(JObject data)
        {
            try
            {
                dynamic json = data;
                List<string> playerIds = ((Newtonsoft.Json.Linq.JArray)json.PlayerIDs).ToObject<List<string>>();

                List<dtoNameReportPair> returnData = new List<dtoNameReportPair>();

                foreach (var id in playerIds)
                {
                    var reportData = this._context.vu_DFSHistoricalReport.Where(p => p.Name == id).OrderBy(p => p.Date).ToList();
                    var playerName = reportData.First().Name;

                    returnData.Add(new dtoNameReportPair { Name = playerName, TimeSeries = reportData });
                }

                return returnData;
            }
            catch (Exception ex)
            {
                // Log exception, if any
                this._logManager.LogError("DFS Report Service Error. Ex - " + ex.Message);
                return null;
            }
        }

        [HttpPost]
        [Route("api/fantasytools/histdfsopponentreport")]
        [EnableCors(origins: "*", headers: "*", methods: "*")]
        public dynamic GetDFSOpponentReport(JObject data)
        {
            try
            {
                dynamic json = data;
                string gameProvider = ((string)json.GameProvider);

                // Can't include a SQL order by in the views so we'll do it here.
                if (gameProvider == "DK")
                {
                    var opponentReport = this._context.vu_DFSHistoricalOpponentReport.OrderBy(t => t.DKValue);

                    return opponentReport;
                }
                else if (gameProvider == "FD")
                {
                    var opponentReport = this._context.vu_DFSHistoricalOpponentReport.OrderBy(t => t.FDValue);

                    return opponentReport;
                }
                else
                {
                    throw new Exception("Invalid Game Type sent to service.");
                }
            }
            catch (Exception ex)
            {
                // Log exception, if any
                this._logManager.LogError("DFS Report Service Error. Ex - " + ex.Message);
                return null;
            }
        }

        public class HistDFSReportComparer : IEqualityComparer<vu_DFSHistoricalReport>
        {

            #region IEqualityComparer<vu_DFSHistoricalReport> Members

            public bool Equals(vu_DFSHistoricalReport x, vu_DFSHistoricalReport y)
            {
                return x.playerid == y.playerid;
            }

            public int GetHashCode(vu_DFSHistoricalReport obj)
            {
                return obj.playerid.GetHashCode();
            }

            #endregion
        }

        public class dtoHistoricalPlayers
        {
            public string label { get; set; }
            public string value { get; set; }
        }

        public class dtoNameReportPair
        {
            public string Name { get; set; }

            public List<vu_DFSHistoricalReport> TimeSeries { get; set; }
        }
    }
}
