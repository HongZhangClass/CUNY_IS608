high='blue',
trans="log",
breaks=myBreaks)
p <- autoplot(areaVsYr) + theme(panel.background=element_rect(fill='white'))
p + scale_fill_gradient(limits= c(1,1000000),
low='grey',
high='blue',
trans="log",
breaks=myBreaks)
p <- autoplot(areaVsYr) + theme(panel.background=element_rect(fill='white'))  + ylim(0, 100000)
p + scale_fill_gradient(limits= c(1,1000000),
low='grey',
high='blue',
trans="log",
breaks=myBreaks)
p <- autoplot(areaVsYr) + theme(panel.background=element_rect(fill='white'))  + ylim(0, 200000)
p + scale_fill_gradient(limits= c(1,1000000),
low='grey',
high='blue',
trans="log",
breaks=myBreaks)
yr <- condense(bin(yrBuilt, 1), z=lotArea)
autoplot(yr)
autoplot(yr) + xlim(1900, 2014)
autoplot(yr) + xlim(1900, 2014) + ylim(0, 10000)
autoplot(yr) + xlim(1900, 2014) + ylim(0, 50000)
yr <- condense(bin(yrBuilt, 3), z=lotArea)
autoplot(yr) + xlim(1900, 2014) + ylim(0, 50000)
yr <- condense(bin(yrBuilt, 5), z=lotArea)
autoplot(yr) + xlim(1900, 2014) + ylim(0, 50000)
autoplot(yr) + xlim(1900, 2014) + ylim(0, 10000)
autoplot(yr) + xlim(1900, 2014) + ylim(0, 10000) = ylab('lotArea')
autoplot(yr) + xlim(1900, 2014) + ylim(0, 10000) + ylab('Lot Area')
p <- autoplot(areaVsYr) + theme(panel.background=element_rect(fill='white'))  + ylim(0, 200000)
p + scale_fill_gradient(limits= c(1,1000000),
low='grey',
high='blue',
trans="log",
breaks=myBreaks)
p + scale_fill_gradient(limits= c(1,100000),
low='grey',
high='blue',
trans="log",
breaks=myBreaks)
areaVsYr <- condense(bin(yrBuilt, 2), bin(lotArea, 1000))
myBreaks <- c(100000, 10000, 1000, 100, 10, 1)
p <- autoplot(areaVsYr) + theme(panel.background=element_rect(fill='white'))  + ylim(0, 200000)
p + scale_fill_gradient(limits= c(1,100000),
low='grey',
high='blue',
trans="log",
breaks=myBreaks)
library("bigvis")
library("ggplot2")
lotArea  <-pdata$LotArea[pdata$YearBuilt > 1850 & pdata$LotArea > 100 & pdata$AssessTot < 10000000 & pdata$NumFloors != 0 ]
pData <- read.csv("~/Dropbox/CUNY/datasets/all_PLUTO_data.R")
pData <- read.csv("/Users/JL/Dropbox/CUNY/datasets/all_PLUTO_data.R")
pData <- read.csv("/Users/JL/Dropbox/CUNY/datasets/all_PLUTO_data.csv")
lotArea  <-pdata$LotArea[pdata$YearBuilt > 1850 & pdata$LotArea > 100 & pdata$AssessTot < 10000000 & pdata$NumFloors != 0 ]
lotArea  <-pData$LotArea[pData$YearBuilt > 1850 & pData$LotArea > 100 & pData$AssessTot < 10000000 & pData$NumFloors != 0 ]
yrBuilt  <- pData$YearBuilt[pData$YearBuilt > 1850 & pData$LotArea > 100 & pData$AssessTot < 10000000 & pData$NumFloors != 0  ]
yr <- condense(bin(yrBuilt, 5), z=lotArea)
autoplot(yr) + xlim(1900, 2014) + ylim(0, 10000) + ylab('Lot Area')
yr <- condense(bin(yrBuilt, 10), z=lotArea)
autoplot(yr) + xlim(1900, 2014) + ylim(0, 10000) + ylab('Lot Area')
yr <- condense(bin(yrBuilt, 1), z=lotArea)
autoplot(yr) + xlim(1900, 2014) + ylim(0, 10000) + ylab('Lot Area')
mydata<-read.csv("https://raw2.github.com/jlaurito/CUNY_IS608/master/lecture1/data/inc5000_data.csv",na.string=c("",".","NA"))
mydata<-read.csv("/Users/JL/Dropbox/CUNY/CUNY_IS608/lecture1/data/inc5000_data.csv",na.string=c("",".","NA"))
mynewdata<-na.omit(mydata)
library(ggplot2)
summary(mynewdata)
A<-ggplot(data=mynewdata,aes(x=Industry, y=State),shape=am,color=am,facets=gear~cyl,size=I(3), xlab="Industry",ylab="State",main="Distribution of Companies by State",colour="#990000", size=)+geom_point()
plot(A)
A + theme(element.title = "Distribution of Companies by State",colour="#990000", size=5)
A + theme(element.title = "Distribution of Companies by State",colour="#990000", size=5)
mydata<-read.csv("C:\\Users\\Albania\\Desktop\\IS 608\\inc5000_data2.csv",na.string=c("",".","NA"))
mydata
mynewdata<-na.omit(mydata)
mynewdata
subset(mynewdata,State=="NY",select=c(Industry,Employees,State))
library(plyr)
res.plyr<-ddply(mynewdata,.(Industry),function(x)mean(x$Employees))
res.plyr
library(ggplot2)
A<-ggplot(res.plyr) +geom_boxplot(aes(x=Industry, y=V1),fill="pink", colour="red", width=0.5)+ggtitle("Average Employment by Industry in NY")+theme(plot.title = element_text(size = rel(2), colour = "blue"))
plot(A)
A + xlab("Industry") + ylab("Average Employment")+theme(axis.text.x  = element_text(angle=90, vjust=0.5, size=8,color="red"))
mydata<-read.csv("C:\\Users\\Albania\\Desktop\\IS 608\\inc5000_data2.csv",na.string=c("",".","NA"))
mydata
mynewdata<-na.omit(mydata)
res.plyr<-ddply(mynewdata,.(Industry),function(x)max(x$Revenue))
A<-qplot(Industry,V1,data=res.plyr, geom="histogram",binwith=0.1)+ggtitle("Average Employment by Industry in NY")
plot(A)
A + xlab("Industry") + ylab("Most Revenue by Employee")+theme(axis.text.x  = element_text(angle=90, vjust=0.5, size=8,color="red"))
# load libraries
library(ggplot2)
library(plyr)
# set working directory
setwd("/Users/JL/Dropbox/CUNY/CUNY_IS608")
# load data
inc <- read.csv("lecture1/data/inc5000_data.csv", header= TRUE)
# conduct a quick data quality investigation
# head(inc)
# summary(inc)
# see we have NA's, will exclude
all_inc <- inc[complete.cases(inc)==TRUE,]
# aggregate by state
cnt <- ddply(all_inc, .(State), summarize, cnt = length(State))
p2 <- ggplot(cnt, aes(x=State, y=cnt)) + geom_bar(stat='identity')
p2 + coord_flip()
p
ny <- subset(all_inc, State == 'NY')
p <- ggplot(ny, aes(x=Industry, y=Employees)) + geom_boxplot()
p
# uh oh, we have an outlier that makes this analysis difficult
# compute lower and upper whiskers
winsor <- function(x, bot, top)  { return(min(top, max(x, bot))) }
ny$clip_employ <- sapply(ny$Employees, winsor, bot=0, top =1000)
ylim1 <- boxplot.stats(ny$Employees)$stats[c(1, 5)]
# scale y limits based on ylim1
p + coord_flip(ylim=c(0,1000))
# aggregate by state & industry
st_ind <- ddply(all_inc,
.(State, Industry),
summarize,
count  = round(mean(length(State)), 2),
size   = round(mean(Employees), 2),
growth = round(mean(Growth_Rate), 2),
rev_per_employee = round(mean(Revenue/Employees),2)
)
# head(states)
# exclude state/industry combos with < 5 companies
st_ind_lrg <- st_ind[st_ind$count >= 5,]
# show revenue per employee in each state
p <- ggplot(all_inc, aes())
cnt <- ddply(all_inc, .(State), summarize, cnt = length(State))
p <- ggplot(cnt, aes(x=State, y=cnt)) + geom_bar(stat='identity')
p
p <- ggplot(cnt, aes(x=State, y=cnt)) + geom_bar(stat='identity')
p + coord_flip()
ny <- subset(all_inc, State == 'NY')
p <- ggplot(ny, aes(x=Industry, y=Employees)) + geom_point()
p + coord_flip()
winsor <- function(x, bot, top)  { return(min(top, max(x, bot))) }
ny$clip_employ <- sapply(ny$Employees, winsor, bot=0, top =2500)
p3 <- ggplot(ny, aes(x=Industry, y=clip_employ))
p3 + geom_point() + coord_flip()
p3 + geom_boxplot() + coord_flip(ylim=c(0,2500))
p3 + geom_boxplot() + coord_flip(ylim=c(0,2500)) +
annotate('text', label= c('outliers','3,000','10,000','32,000'),
x = c(18,16,5,2), y=c(2300,2400,2400,2400), size=c(4,3,3,3))
ny_ave <- ddply(ny, .(Industry), summarize,
mean <- mean(Employees),
sd <- sd(Employees),
median <- median(clip_employ),
lower <- quantile(clip_employ)[2],
upper <- quantile(clip_employ)[4]
)
names(ny_ave) <- c('Industry', 'mean', 'sd', 'median', 'lower', 'upper')
head(ny_ave,2)
p4 <- ggplot(ny_ave, aes(x=Industry, y=median)) + geom_point()
p4 <- p4 + geom_pointrange(ymin=ny_ave$lower, ymax=ny_ave$upper)
p4 + ylim(c(0,750)) + coord_flip()
p5 <- ggplot(ny_ave, aes(x=Industry, y=median)) + geom_bar(stat='identity')
p5 <- p5 + geom_errorbar(ymin=ny_ave$lower, ymax=ny_ave$upper, width=.1, color='red')
p5 + ylim(c(0,750)) + coord_flip()
all_inc$rev_per_employ <- all_inc$Revenue / all_inc$Employees
p6 <- ggplot(all_inc, aes(x=Industry, y=rev_per_employ))
p6 + geom_boxplot() + coord_flip()
library(plyr)
library(ggplot2)
# loading data from CSV file
inc = inc[complete.cases(inc),]
states = ddply(inc, 'State', function(x) c(Count = nrow(x)))
states
c = ggplot(data=states, aes(y=Count,x=reorder(State,-Count)))
c + geom_bar(stat="identity", width=.8) + coord_flip() +
ylab("Number of Companies") +
xlab("State") +
ggtitle("Company Distribution by State")
ny = inc[inc$State == "NY",]
max = 3*sd(ny$Employees)
ny = ny[ny$Employees < max,]
nysumm = ddply(ny, 'Industry', function(x) c(summary(x$Employees) ))
names(nysumm) = c("Industry","Min","FirstQ","Median","Mean","ThirdQ","Max")
d = ggplot(data=nysumm, aes(y = Mean, x = reorder(Industry, Mean), ymin=FirstQ, ymax=ThirdQ))
d + geom_pointrange() + coord_flip() + ggtitle("New York Companies Employee Distribution by Industry") + xlab("Industry") + ylab("Average Employee per Company") + guides(guide_legend("tilte"))
rev = ddply(inc, 'Industry', function(x) c(Rev = sum(x$Revenue), Emp = sum(x$Employees)))
rev$RPE = rev$Rev / rev$Emp
qplot(RPE, reorder(Industry,-RPE), data=rev,
xlab="Revenue Per Employee", ylab="Industry", main = "Revenue Per Employee by Industry")
library("ggplot2")
library("Hmisc")
install.packages("Hmisc")
library("Hmisc")
HW1_Companies <- inc
head(HW1_Companies)
comp_by_state <- ggplot(HW1_Companies, aes(factor(HW1_Companies$State)))
comp_by_state
comp_by_state + geom_bar(aes(y = ..count..))  + coord_flip() + labs(y = "Companies", x = "State")
NYdata <- subset(HW1_Companies[complete.cases(HW1_Companies),], State == "NY", select=c(Industry, Name, Employees))
NYdata_condensed <- ddply(NYdata, "Industry", summarise, length(unique(Industry)), CompanyNumber=length(Name), "Employees" = sum(Employees))
qplot(Employees/CompanyNumber, Industry, data = NYdata_condensed, xlab="Avg # of Employees")
Revenue_by_Industry <- subset(HW1_Companies[complete.cases(HW1_Companies),], select=c(Industry, Revenue, Employees))
Rev_by_Industry_condensed <- ddply(Revenue_by_Industry, "Industry", summarise, length(unique(Industry)), "Revenue" = sum(Revenue), "Employees" = sum(Employees))
qplot(Revenue/Employees, Industry, data = Rev_by_Industry_condensed, xlab = "Rev$ per Worker")
qplot(Employees/CompanyNumber, Industry, data = NYdata_condensed, xlab="Avg # of Employees")
NYdata_condensed <- ddply(NYdata, "Industry", summarise, length(unique(Industry)), CompanyNumber=length(Name), "Employees" = sum(Employees))
library(plyr)
library(ggplot2)
library(scales)
library(grid)
View(Revenue_by_Industry)
raw.data <- mydata
by.state <- ddply(raw.data, .(State), summarize, count = length(Rank))
by.state <- by.state[order(by.state$count),]
by.state$State <- factor(by.state$State, levels = by.state$State) #This controls ggplot ordering
figure1 <- ggplot(data=by.state, aes(x=State, y=count)) +
geom_bar(stat="identity") +
coord_flip() +
ggtitle("Figure 1. Number of Fastest Growing Tech Companies per State") +
theme(axis.title.x = element_blank(), plot.title = element_text(size = 12))
figure1
by.state <- ddply(raw.data, .(State), summarize, count = length(Rank))
by.state <- by.state[order(by.state$count),]
raw.data <- mydata
by.state <- ddply(raw.data, .(State), summarize, count = length(Rank))
by.state <- by.state[order(by.state$count),]
by.state <- by.state[order(by.state$count),]
by.state$State <- factor(by.state$State, levels = by.state$State) #This controls ggplot ordering
library(plyr)
by.state <- ddply(raw.data, .(State), summarize, count = length(Rank))
head(raw.data)
by.state <- ddply(raw.data, .(State), summarize, count = length(Rank))
by.state <- ddply(raw.data, .(State), summarize, count <- length(Rank))
head(raw.data)
by.state <- ddply(raw.data, .(State), summarize, count = length(Rank))
by.state
by.state <- ddply(raw.data, .(State), summarize, count = length(Name))
by.state <- ddply(raw.data, .(State), summarize, count <- length(Name))
raw.data <- mydata[:]
raw.data <- mydata[,]
head(raw.data)
by.state <- ddply(raw.data, .(State), summarize, count <- length(Name))
by.state <- ddply(raw.data, .(State), summarize, count <- length(Rank))
by.state <- ddply(raw.data, .(State), summarize, count <- length(State))
by.state <- ddply(raw.data, .(State), summarize, count <- length(State))
by.state <- ddply(raw.data, .(State), summarize, cnt = length(State))
head(raw.data)
by.state <- ddply(raw.data, .(State), summarize, count = length(State))
by.state <- ddply(raw.data, .(State), summarize, count = length(Employees))
allinc <- mydata[,]
all_inc <- mydata[,]
raw.data <- raw.data[complete.cases(raw.data)==TRUE,]
by.state <- ddply(raw.data, .(State), summarize, count = length(Employees))
View(mynewdata)
raw.data <- raw.data[complete.cases(raw.data)==TRUE,]
by.state <- ddply(raw.data, .(State), summarize, count = length(Rank))
by.state <- ddply(all_inc, .(State), summarize, count = length(Rank))
# load required packages
library(plyr)
library(ggplot2)
library(scales)
library(grid)
by.state <- ddply(all_inc, .(State), summarize, count = length(Rank))
by.state <- ddply(all_inc, .(State), summarise, count = length(Rank))
by.state <- by.state[order(by.state$count),]
by.state$State <- factor(by.state$State, levels = by.state$State) #This controls ggplot ordering
figure1 <- ggplot(data=by.state, aes(x=State, y=count)) +
geom_bar(stat="identity") +
coord_flip() +
ggtitle("Figure 1. Number of Fastest Growing Tech Companies per State") +
theme(axis.title.x = element_blank(), plot.title = element_text(size = 12))
figure1
ny <- raw.data[raw.data$State == "NY" & raw.data$Employees < outlier,]
# Make sure to note how many companies are being discarded
print("Number of companies discarded")
nrow(raw.data[raw.data$State == "NY" & raw.data$Employees >= outlier,])
table(raw.data$Industry[raw.data$State == "NY" & raw.data$Employees >= outlier])
# Summarize average and total number of Employees by Industry
ny.ind <- ddply(ny, .(Industry), summarize,
avg.employeed = mean(Employees),
total.employed = sum(Employees),
num.companies = length(Employees),
avg.revenue = mean(Revenue/Employees),
sd.revenue = sd(Revenue/Employees),
avg.growth = mean(Growth_Rate))
# Order data based on average number of employees (descending)
ny.ind <- ny.ind[order(ny.ind$avg.employeed, decreasing=TRUE),]
# Order factor levels in main data frame based on average number of employees
ny$Industry <- factor(ny$Industry, levels=ny.ind$Industry)
# Found cool function: http://stackoverflow.com/questions/13297155/add-floating-axis-labels-in-facet-wrap-plot
# Adds labels to second row
facetAdjust <- function(x, pos = c("up", "down"))
{
pos <- match.arg(pos)
p <- ggplot_build(x)
gtable <- ggplot_gtable(p); dev.off()
dims <- apply(p$panel$layout[2:3], 2, max)
nrow <- dims[1]
ncol <- dims[2]
panels <- sum(grepl("panel", names(gtable$grobs)))
space <- ncol * nrow
n <- space - panels
if(panels != space){
idx <- (space - ncol - n + 1):(space - ncol)
gtable$grobs[paste0("axis_b",idx)] <- list(gtable$grobs[[paste0("axis_b",panels)]])
if(pos == "down"){
rows <- grep(paste0("axis_b\\-[", idx[1], "-", idx[n], "]"),
gtable$layout$name)
lastAxis <- grep(paste0("axis_b\\-", panels), gtable$layout$name)
gtable$layout[rows, c("t","b")] <- gtable$layout[lastAxis, c("t")]
}
}
class(gtable) <- c("facetAdjust", "gtable", "ggplot"); gtable
}
print.facetAdjust <- function(x, newpage = is.null(vp), vp = NULL) {
if(newpage)
grid.newpage()
if(is.null(vp)){
grid.draw(x)
} else {
if (is.character(vp))
seekViewport(vp)
else pushViewport(vp)
grid.draw(x)
upViewport()
}
invisible(x)
}
# When facet_wrap populates a grid, it does it row wise.
# This function orders factors such that a rxc grid will be ordered column wise.
#
# i.e.:
#   Assuming a factor is ordered by rank [1, 2, 3, 4, 5, 6].
# Default behavior with ncol=2 will produce
# 1 2
# 3 4
# 5 6
#
# This function will order the factors such that facet_wrap with ncol=2 will produce
# 1 4
# 2 5
# 3 6
#
# It does this by ordering the factors as [1, 4, 2, 5, 3, 6]
facet.order <- function(level.order, ncols){
ntotal <- length(level.order)
nrows <- ceiling(ntotal / ncols)
new.order <- level.order
for(c in 1:ncols){
index.start <- 1 + (c-1) * nrows
index.end <- nrows + (c-1) * nrows
index.end <- min(index.end, ntotal)
new.order[seq(from=c, to=ntotal, by=ncols)] <- level.order[index.start:index.end]
}
return(new.order)
}
# figure 2, dotplot
# Order summary data based on average number of employees (descending)
ny.ind <- ny.ind[order(ny.ind$avg.employeed, decreasing=TRUE),]
# Order factors for plot
ny$Industry <- factor(ny$Industry, levels = facet.order(ny.ind$Industry, 2))
d <- ggplot(ny, aes(x=Employees)) + theme_bw() +
theme(strip.text.x = element_text(size=8)) +
geom_dotplot(binwidth=5, dotsize=0.75, method="histodot") +
facet_wrap(~ Industry, ncol=2) +
geom_vline(data=ny.ind, aes(xintercept=avg.employeed), color="red", size=1) +
scale_y_continuous(name = "Each point represents one company", breaks = NULL) +
scale_x_continuous(name = "Number of employees (average per industry in red)",
breaks = seq(from=0, to=300, by=50),
minor_breaks = seq(from=0, to=300, by=10)) +
ggtitle("Figure 2. Number of employees per company")
figure2 <- facetAdjust(d)
print(figure2)
figure2
nrow(raw.data[raw.data$State == "NY" & raw.data$Employees >= outlier,])
figure1
outlier = 300
# Filter on NY, discard companies greater than outlier limit
ny <- raw.data[raw.data$State == "NY" & raw.data$Employees < outlier,]
# Make sure to note how many companies are being discarded
print("Number of companies discarded")
nrow(raw.data[raw.data$State == "NY" & raw.data$Employees >= outlier,])
table(raw.data$Industry[raw.data$State == "NY" & raw.data$Employees >= outlier])
ny.ind <- ddply(ny, .(Industry), summarise,
avg.employeed = mean(Employees),
total.employed = sum(Employees),
num.companies = length(Employees),
avg.revenue = mean(Revenue/Employees),
sd.revenue = sd(Revenue/Employees),
avg.growth = mean(Growth_Rate))
ny.ind <- ny.ind[order(ny.ind$avg.employeed, decreasing=TRUE),]
ny$Industry <- factor(ny$Industry, levels=ny.ind$Industry)
facetAdjust <- function(x, pos = c("up", "down"))
{
pos <- match.arg(pos)
p <- ggplot_build(x)
gtable <- ggplot_gtable(p); dev.off()
dims <- apply(p$panel$layout[2:3], 2, max)
nrow <- dims[1]
ncol <- dims[2]
panels <- sum(grepl("panel", names(gtable$grobs)))
space <- ncol * nrow
n <- space - panels
if(panels != space){
idx <- (space - ncol - n + 1):(space - ncol)
gtable$grobs[paste0("axis_b",idx)] <- list(gtable$grobs[[paste0("axis_b",panels)]])
if(pos == "down"){
rows <- grep(paste0("axis_b\\-[", idx[1], "-", idx[n], "]"),
gtable$layout$name)
lastAxis <- grep(paste0("axis_b\\-", panels), gtable$layout$name)
gtable$layout[rows, c("t","b")] <- gtable$layout[lastAxis, c("t")]
}
}
class(gtable) <- c("facetAdjust", "gtable", "ggplot"); gtable
}
print.facetAdjust <- function(x, newpage = is.null(vp), vp = NULL) {
if(newpage)
grid.newpage()
if(is.null(vp)){
grid.draw(x)
} else {
if (is.character(vp))
seekViewport(vp)
else pushViewport(vp)
grid.draw(x)
upViewport()
}
invisible(x)
}
facet.order <- function(level.order, ncols){
ntotal <- length(level.order)
nrows <- ceiling(ntotal / ncols)
new.order <- level.order
for(c in 1:ncols){
index.start <- 1 + (c-1) * nrows
index.end <- nrows + (c-1) * nrows
index.end <- min(index.end, ntotal)
new.order[seq(from=c, to=ntotal, by=ncols)] <- level.order[index.start:index.end]
}
return(new.order)
}
ny.ind <- ny.ind[order(ny.ind$avg.employeed, decreasing=TRUE),]
ny$Industry <- factor(ny$Industry, levels = facet.order(ny.ind$Industry, 2))
d <- ggplot(ny, aes(x=Employees)) + theme_bw() +
theme(strip.text.x = element_text(size=8)) +
geom_dotplot(binwidth=5, dotsize=0.75, method="histodot") +
facet_wrap(~ Industry, ncol=2) +
geom_vline(data=ny.ind, aes(xintercept=avg.employeed), color="red", size=1) +
scale_y_continuous(name = "Each point represents one company", breaks = NULL) +
scale_x_continuous(name = "Number of employees (average per industry in red)",
breaks = seq(from=0, to=300, by=50),
minor_breaks = seq(from=0, to=300, by=10)) +
ggtitle("Figure 2. Number of employees per company")
figure2 <- facetAdjust(d)
print(figure2)
print(figure2)
ny.ind <- ny.ind[order(ny.ind$avg.revenue, decreasing=TRUE),]
ny$Industry <- factor(ny$Industry, levels = facet.order(ny.ind$Industry, 2))
figure3 <- ggplot(ny, aes(x=Revenue/Employees, y=Growth_Rate/100)) + theme_bw() +
geom_point() +
scale_x_log10("Revenue per Employee (log scale)\nAverage show in red", labels = dollar) +
# Something is funny here ...
scale_y_log10("3 Year percentage growth (log scale)\nAverage shown in blue",
labels = percent) +
# scale_y_log10("3 Year Percentage Growth (log scale)") +
facet_wrap(~ Industry, ncol=2) +
geom_vline(data=ny.ind, aes(xintercept=avg.revenue), color="red", size=1) +
geom_hline(data=ny.ind, aes(yintercept=avg.growth/100), color="blue") +
ggtitle("Figure 3. Revenue generated per employee")
figure3.adjusted <- facetAdjust(figure3)
print(figure3.adjusted)
# Assignment 1 (Part 1)
install.packages("ggplot2")
install.packages("plyr")
library(ggplot2)
library(plyr)
install.packages("ggplot2")
companies = all_inc
statecount <- ddply(companies, .(State), summarise, statecount=length(State))
p <- ggplot(statecount, aes(x=reorder(State,-statecount), y=statecount))
p + geom_bar(state="identity") + coord_flip() + scale_y_continuous(expand=c(0,0), breaks = round(seq(0, max(statecount$statecount), by=50))) + labs(title="Companies Location by State") + xlab("States") + ylab("Number of Companies") + theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))
companiesNY <- companies[companies$State == "NY",]
companiesNYVec <- complete.cases(companiesNY)
companiesNYComplete <- companiesNY[companiesNYVec, ]
companiesNYComplete <- na.omit(companiesNYComplete)
industry <- ddply(companiesNYComplete, .(Industry), summarize, medianEmployees=median(Employees), lower=quantile(Employees)[2], higher=quantile(Employees)[4])
p <- ggplot(industry, aes(x=reorder(Industry,medianEmployees), y=medianEmployees))
p + geom_bar(position = position_dodge()) + geom_errorbar(aes(ymin=medianEmployees-lower, ymax=medianEmployees+higher), col="red") + scale_y_continuous(expand=c(0,0), breaks=round(seq(0, 1000, by=50))) + labs(title="Median Employment by Industry in NY") + xlab("Industries") + ylab("Median Employees") + theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))
industry <- ddply(companiesNYComplete, .(Industry), summarize, medianEmployees=median(Employees), lower=quantile(Employees)[2], higher=quantile(Employees)[4])
industry <- ddply(companiesNYComplete, .(Industry), summarise, medianEmployees=median(Employees), lower=quantile(Employees)[2], higher=quantile(Employees)[4])
p <- ggplot(industry, aes(x=reorder(Industry,medianEmployees), y=medianEmployees))
p + geom_bar(position = position_dodge()) + geom_errorbar(aes(ymin=medianEmployees-lower, ymax=medianEmployees+higher), col="red") + scale_y_continuous(expand=c(0,0), breaks=round(seq(0, 1000, by=50))) + labs(title="Median Employment by Industry in NY") + xlab("Industries") + ylab("Median Employees") + theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))
companiesRev <- companies
companiesRev$RevPerEmp <- companiesRev$Revenue / companiesRev$Employees
p <- ggplot(companiesRev, aes(Industry, RevPerEmp))
p + stat_boxplot(geom ='errorbar') + geom_boxplot() + scale_y_continuous(limits = c(0, 1200000), breaks=round(seq(0, 1500000, by=100000))) + coord_flip() + labs(title="Revenue per Employee by Industry") + theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))
p <- ggplot(industry, aes(x=reorder(Industry,medianEmployees), y=medianEmployees))
p + geom_bar(position = position_dodge()) + geom_errorbar(aes(ymin=medianEmployees-lower, ymax=medianEmployees+higher), col="red") + scale_y_continuous(expand=c(0,0), breaks=round(seq(0, 1000, by=50))) + labs(title="Median Employment by Industry in NY") + xlab("Industries") + ylab("Median Employees") + theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))
companiesRev <- companies
companiesRev$RevPerEmp <- companiesRev$Revenue / companiesRev$Employees
p <- ggplot(companiesRev, aes(Industry, RevPerEmp))
p + stat_boxplot(geom ='errorbar') + geom_boxplot() + scale_y_continuous(limits = c(0, 1200000), breaks=round(seq(0, 1500000, by=100000))) + coord_flip() + labs(title="Revenue per Employee by Industry") + theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))
industries <- data.frame(companiesRev$Industry, companiesRev$RevPerEmp)
industries <- aggregate(companiesRev.RevPerEmp ~ companiesRev.Industry, industries, mean)
p <- ggplot(industries, aes(x=reorder(companiesRev.Industry,companiesRev.RevPerEmp), y=companiesRev.RevPerEmp))
p + geom_bar(state="identity") + scale_y_continuous(expand=c(0,0), breaks=round(seq(0, max(industries$companiesRev.RevPerEmp), by=100000))) + labs(title="Average Revenue per Employee by Industry in the US") + xlab("Industries") + ylab("Avg Revenue per Employe") + theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))
p + stat_boxplot(geom ='errorbar') + geom_boxplot() + scale_y_continuous(limits = c(0, 1200000), breaks=round(seq(0, 1500000, by=100000))) + coord_flip() + labs(title="Revenue per Employee by Industry") + theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))
p <- ggplot(companiesRev, aes(Industry, RevPerEmp))
p + stat_boxplot(geom ='errorbar') + geom_boxplot() + scale_y_continuous(limits = c(0, 1200000), breaks=round(seq(0, 1500000, by=100000))) + coord_flip() + labs(title="Revenue per Employee by Industry") + theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))
