autoplot(yr) + xlim(1900, 2014) + ylim(0, 50000)
yr <- condense(bin(yrBuilt, 3), z=lotArea)
autoplot(yr) + xlim(1900, 2014) + ylim(0, 50000)
yr <- condense(bin(yrBuilt, 5), z=lotArea)
autoplot(yr) + xlim(1900, 2014) + ylim(0, 50000)
autoplot(yr) + xlim(1900, 2014) + ylim(0, 10000)
autoplot(yr) + xlim(1900, 2014) + ylim(0, 10000) = ylab('lotArea')
autoplot(yr) + xlim(1900, 2014) + ylim(0, 10000) + ylab('Lot Area')
p <- autoplot(areaVsYr) + theme(panel.background=element_rect(fill='white'))  + ylim(0, 200000)
p + scale_fill_gradient(limits= c(1,1000000),
low='grey',
high='blue',
trans="log",
breaks=myBreaks)
p + scale_fill_gradient(limits= c(1,100000),
low='grey',
high='blue',
trans="log",
breaks=myBreaks)
areaVsYr <- condense(bin(yrBuilt, 2), bin(lotArea, 1000))
myBreaks <- c(100000, 10000, 1000, 100, 10, 1)
p <- autoplot(areaVsYr) + theme(panel.background=element_rect(fill='white'))  + ylim(0, 200000)
p + scale_fill_gradient(limits= c(1,100000),
low='grey',
high='blue',
trans="log",
breaks=myBreaks)
library("bigvis")
library("ggplot2")
lotArea  <-pdata$LotArea[pdata$YearBuilt > 1850 & pdata$LotArea > 100 & pdata$AssessTot < 10000000 & pdata$NumFloors != 0 ]
pData <- read.csv("~/Dropbox/CUNY/datasets/all_PLUTO_data.R")
pData <- read.csv("/Users/JL/Dropbox/CUNY/datasets/all_PLUTO_data.R")
pData <- read.csv("/Users/JL/Dropbox/CUNY/datasets/all_PLUTO_data.csv")
lotArea  <-pdata$LotArea[pdata$YearBuilt > 1850 & pdata$LotArea > 100 & pdata$AssessTot < 10000000 & pdata$NumFloors != 0 ]
lotArea  <-pData$LotArea[pData$YearBuilt > 1850 & pData$LotArea > 100 & pData$AssessTot < 10000000 & pData$NumFloors != 0 ]
yrBuilt  <- pData$YearBuilt[pData$YearBuilt > 1850 & pData$LotArea > 100 & pData$AssessTot < 10000000 & pData$NumFloors != 0  ]
yr <- condense(bin(yrBuilt, 5), z=lotArea)
autoplot(yr) + xlim(1900, 2014) + ylim(0, 10000) + ylab('Lot Area')
yr <- condense(bin(yrBuilt, 10), z=lotArea)
autoplot(yr) + xlim(1900, 2014) + ylim(0, 10000) + ylab('Lot Area')
yr <- condense(bin(yrBuilt, 1), z=lotArea)
autoplot(yr) + xlim(1900, 2014) + ylim(0, 10000) + ylab('Lot Area')
rm(all.purch)
rm(blu)
q()
~/.RData
library("bigvis")
library("ggplot2")
All_dataBKBXMNQNSI <- read.csv('/Users/JL/Dropbox/CUNY/datasets/all_PLUTO_data.csv')
All_dataBKBXMNQNSI$AssValperfl<-All_dataBKBXMNQNSI$AssessTot/All_dataBKBXMNQNSI$NumFloors
ggplot(All_dataBKBXMNQNSI[subset, c("NumFloors","YearBuilt")  ], aes(y=(NumFloors), x =YearBuilt)) + geom_point(shape=1)
library("ggplot2")
ggplot(All_dataBKBXMNQNSI[subset, c("NumFloors","YearBuilt")  ], aes(y=(NumFloors), x =YearBuilt)) + geom_point(shape=1)
subset <- which(All_dataBKBXMNQNSI$YearBuilt > 1850 &
All_dataBKBXMNQNSI$LotArea > 100 &
All_dataBKBXMNQNSI$AssessTot < 10000000 &
All_dataBKBXMNQNSI$NumFloors != 0 )
ggplot(All_dataBKBXMNQNSI[subset, ], aes(x=YearBuilt)) + geom_histogram(binwidth=5)
ggplot(All_dataBKBXMNQNSI[subset, c("NumFloors","YearBuilt")  ], aes(y=(NumFloors), x =YearBuilt)) + geom_point(shape=1)
pData <- read.csv('/Users/JL/Dropbox/CUNY/datasets/all_PLUTO_data.csv')
?smooth
library(ggplot2)
library(bigvis)
library(plyr)
?smooth
pData <- pData[pData$YearBuilt >= 1850, ]
# Convert to factors
pData$Borough <- as.factor(pData$Borough)
pData$LtdHeight <- as.factor(pData$LtdHeight)
pData$LandUse <- as.factor(pData$LandUse)
pData$BuiltCode <- as.factor(pData$BuiltCode)
# Remove data when numfloors & numbuildings == 0
pData <- pData[!(pData$NumBldgs == 0 & pData$NumFloors == 0), ]
# Get rid of lots with a really small area
pData <- pData[pData$LotArea > 100, ]
# There are two assessments in the data, one for total and one for land.
# Since we are interested in building construction, it makes sense to look
# only at the value of the building, which is total assessment - land assessment.
# Add that column to the data as AssessBldg.
pData$AssessBldg <- pData$AssessTot - pData$AssessLand
pData <- pData[pData$AssessBldg > 0 & pData$BldgArea > 0, ]
pData$AssessSqft <- pData$AssessBldg / pData$BldgArea
# To compute cost per floor, will first filter out buildings with 0 floors
pData <- pData[pData$NumFloors != 0, ]
# Now add a column for cost per floor
pData$ValuePerFloor <- pData$AssessBldg / pData$NumFloors
# Figure 1
ggplot(pData, aes(YearBuilt, fill=BuiltCode)) +
geom_bar(stat="bin", binwidth = 10) +
scale_x_continuous(breaks=seq(1850, 2025, 10))  +
geom_vline(x=seq(1850, 2025, 10), color="white") +
theme(panel.grid.minor.x=element_blank()) +
ggtitle("Construction activity per decade") +
xlab("Year") + ylab("Number of buildings") +
scale_fill_discrete(name = "Record Type",
breaks=c("", "E"),
labels=c("Known", "Estimated"))
# Figure 2
floors <- condense(bin(pData$YearBuilt, 10), bin(pData$NumFloors, 2))
autoplot(floors) + theme_bw() +
scale_fill_gradient("Number Built",
trans = 'log',
# limits = c(1, 1000),
low="lightgray", high="black") +
scale_y_continuous(breaks=seq(0, 130, 10)) +
scale_x_continuous(breaks=seq(1850, 2020, 10)) +
xlab("Year Built") +
ylab("Number of floors") +
ggtitle("Height distribution of buildings.") +
geom_hline(y=c(20, 30, 40), color="blue")
# Figure 3
bin.year <- 1
sf <- bin.year * 10 # smoothing factor
sf
?smooth
?paste0
stype
value <- condense(bin(pData$YearBuilt, bin.year),
z=pData$ValuePerFloor,
summary=stype)
stype = "median" # condense summary. set to [mean, median]
smethod = "robust_regression" # set to [mean, regression, robust_regression]
value <- condense(bin(pData$YearBuilt, bin.year),
z=pData$ValuePerFloor,
summary=stype)
value.s <- smooth(value, sf, var=paste0(".", stype), type=smethod)
?smooth
library(rgooglevis)
library(rGoogleVis)
library(googleVis)
?googleVis
library(RCurl)
dat <- getURL('https://docs.google.com/spreadsheet/ccc?key=0AsJDXPO0ATU2dGg2cDk1bXpoMFVhYXNFY2FDdEFvcXc&usp=drive_web#gid=0')
dat
dat <- getURL('https://www.google.com/url?q=https://docs.google.com/spreadsheet/ccc?key%3D0AsJDXPO0ATU2dGg2cDk1bXpoMFVhYXNFY2FDdEFvcXc%26usp%3Ddrive_web%26pref%3D2&amp;sa=p')
dat
dat <- getURL('https://docs.google.com/spreadsheet/ccc?key=0AsJDXPO0ATU2dGg2cDk1bXpoMFVhYXNFY2FDdEFvcXc')
dat
dat <- getURL('https://docs.google.com/spreadsheet/ccc?key=0AsJDXPO0ATU2dGg2cDk1bXpoMFVhYXNFY2FDdEFvcXc&usp=drive_web#gid=0')
dat
dat <- getURL('https://docs.google.com/spreadsheet/ccc?key=0AsJDXPO0ATU2dGg2cDk1bXpoMFVhYXNFY2FDdEFvcXc&usp=drive_web#gid=0&ndplr=1')
dat
dat <- getURL('https://docs.google.com/spreadsheet/ccc?key=0AsJDXPO0ATU2dGg2cDk1bXpoMFVhYXNFY2FDdEFvcXc&usp=drive_web&ndplr=1')
dat
dat <- getURL('https://docs.google.com/spreadsheet/ccc?key=0AsJDXPO0ATU2dGg2cDk1bXpoMFVhYXNFY2FDdEFvcXc&usp=drive_web&output=csv')
dat
dat <- getURL('https://docs.google.com/spreadsheet/ccc?key=0AsJDXPO0ATU2dGg2cDk1bXpoMFVhYXNFY2FDdEFvcXc&output=csv')
dat
dat <- getURL('https://docs.google.com/spreadsheet/ccc?key=0AsJDXPO0ATU2dGg2cDk1bXpoMFVhYXNFY2FDdEFvcXc&output=csv')
dat
dat <- getURL('https://docs.google.com/spreadsheet/ccc?key=0AsJDXPO0ATU2dGg2cDk1bXpoMFVhYXNFY2FDdEFvcXc&usp=drive_web#gid=0')
dat
dat <- getURL('https://docs.google.com/spreadsheet/ccc?key=0AsJDXPO0ATU2dGg2cDk1bXpoMFVhYXNFY2FDdEFvcXc&usp=drive_web#gid=0')
dat
dat <- getURL('https://docs.google.com/spreadsheet/ccc?key=0AsJDXPO0ATU2dGg2cDk1bXpoMFVhYXNFY2FDdEFvcXc&usp=drive_web#gid=0')
dat
dat <- getURL('https://docs.google.com/spreadsheet/pub?key=0AsJDXPO0ATU2dGg2cDk1bXpoMFVhYXNFY2FDdEFvcXc&single=true&gid=0&output=html')
dat
dat <- getURL('https://docs.google.com/spreadsheet/pub?key=0AsJDXPO0ATU2dGg2cDk1bXpoMFVhYXNFY2FDdEFvcXc&single=true&gid=0&output=csv')
dat
dat <- read.csv(getURL('https://docs.google.com/spreadsheet/pub?key=0AsJDXPO0ATU2dGg2cDk1bXpoMFVhYXNFY2FDdEFvcXc&single=true&gid=0&output=csv'))
dat
dat <- getURL('https://docs.google.com/spreadsheet/pub?key=0AsJDXPO0ATU2dGg2cDk1bXpoMFVhYXNFY2FDdEFvcXc&single=true&gid=0&output=csv')
dat
myUrl <- 'https://docs.google.com/spreadsheet/pub?key=0AsJDXPO0ATU2dGg2cDk1bXpoMFVhYXNFY2FDdEFvcXc&single=true&gid=0&output=csv'
myUrl <- 'https://docs.google.com/spreadsheet/pub?key=0AsJDXPO0ATU2dGg2cDk1bXpoMFVhYXNFY2FDdEFvcXc&single=true&gid=0&output=csv'
myUrl <- 'https://docs.google.com/spreadsheet/pub?key=0AsJDXPO0ATU2dGg2cDk1bXpoMFVhYXNFY2FDdEFvcXc&single=true&gid=0&output=csv'
#
# from here on out: code to generate the dashboard
#
# some code from Revolution Analytics at http://blog.revolutionanalytics.com/2014/06/reading-data-from-the-new-version-of-google-spreadsheets.html
#
library(googleVis)
library(RCurl)
library(XML)
cleanGoogleTable <- function(dat, table=1, skip=0, ncols=NA, nrows=-1, header=TRUE, dropFirstCol=NA){
if(!is.data.frame(dat)){
dat <- dat[[table]]
}
if(is.na(dropFirstCol)) {
firstCol <- na.omit(dat[[1]])
if(all(firstCol == ".") || all(firstCol== as.character(seq_along(firstCol)))) {
dat <- dat[, -1]
}
} else if(dropFirstCol) {
dat <- dat[, -1]
}
if(skip > 0){
dat <- dat[-seq_len(skip), ]
}
if(nrow(dat) == 1) return(dat)
if(nrow(dat) >= 2){
if(all(is.na(dat[2, ]))) dat <- dat[-2, ]
}
if(header && nrow(dat) > 1){
header <- as.character(dat[1, ])
names(dat) <- header
dat <- dat[-1, ]
}
# Keep only desired columns
if(!is.na(ncols)){
ncols <- min(ncols, ncol(dat))
dat <- dat[, seq_len(ncols)]
}
# Keep only desired rows
if(nrows > 0){
nrows <- min(nrows, nrow(dat))
dat <- dat[seq_len(nrows), ]
}
# Rename rows
rownames(dat) <- seq_len(nrow(dat))
dat
}
readGoogleSheet <- function(url, na.string="", header=TRUE){
stopifnot(require(XML))
# Suppress warnings because Google docs seems to have incomplete final line
suppressWarnings({
doc <- paste(readLines(url), collapse=" ")
})
if(nchar(doc) == 0) stop("No content found")
htmlTable <- gsub("^.*?(<table.*</table).*$", "\\1>", doc)
ret <- readHTMLTable(htmlTable, header=header, stringsAsFactors=FALSE, as.data.frame=TRUE)
lapply(ret, function(x){ x[ x == na.string] <- NA; x})
}
sheet <- getURL(myUrl)
dat <- readGoogleSheet(sheet)
clean_data <- cleanGoogleTable(dat, table=1)
clean_data
dat
cleanGoogleTable <- function(dat, table=1, skip=0, ncols=NA, nrows=-1, header=TRUE, dropFirstCol=NA){
if(!is.data.frame(dat)){
dat <- dat[[table]]
}
if(is.na(dropFirstCol)) {
firstCol <- na.omit(dat[[1]])
if(all(firstCol == ".") || all(firstCol== as.character(seq_along(firstCol)))) {
dat <- dat[, -1]
}
} else if(dropFirstCol) {
dat <- dat[, -1]
}
if(skip > 0){
dat <- dat[-seq_len(skip), ]
}
if(nrow(dat) == 1) return(dat)
if(nrow(dat) >= 2){
if(all(is.na(dat[2, ]))) dat <- dat[-2, ]
}
if(header && nrow(dat) > 1){
header <- as.character(dat[1, ])
names(dat) <- header
dat <- dat[-1, ]
}
# Keep only desired columns
if(!is.na(ncols)){
ncols <- min(ncols, ncol(dat))
dat <- dat[, seq_len(ncols)]
}
# Keep only desired rows
if(nrows > 0){
nrows <- min(nrows, nrow(dat))
dat <- dat[seq_len(nrows), ]
}
# Rename rows
rownames(dat) <- seq_len(nrow(dat))
dat
}
sheet <- getURL(myUrl)
dat <- readGoogleSheet(sheet)
library(XML)
packages.install('XML')
package.install('XML')
instal.packages('XML')
install.packages('XML')
dat <- readGoogleSheet(sheet)
sheet <- getURL(myUrl)
dat <- readGoogleSheet(sheet)
clean_data <- cleanGoogleTable(dat, table=1)
sheet <- getURL(myUrl)
sht <- getURL(myUrl)
dat <- readGoogleSheet(sht)
myUrl <- 'https://docs.google.com/spreadsheet/pub?key=0AsJDXPO0ATU2dGg2cDk1bXpoMFVhYXNFY2FDdEFvcXc&single=true&gid=0&output=html'
sht <- getURL(myUrl)
dat <- readGoogleSheet(sht)
myUrl
dat <- readGoogleSheet(sht)
myUrl <- 'https://docs.google.com/spreadsheet/pub?key=0AsJDXPO0ATU2dGg2cDk1bXpoMFVhYXNFY2FDdEFvcXc&single=true&gid=0&output=csv'
sht <- read.csv(myUrl)
sht <- read.csv(myUrl)
sht <- read.csv(myUrl)
sht <- getURL(myUrl)
sht
myUrl <- 'https://docs.google.com/spreadsheet/pub?key=0AsJDXPO0ATU2dGg2cDk1bXpoMFVhYXNFY2FDdEFvcXc&single=true&gid=0&output=html'
sht <- getURL(myUrl)
sht
myUrl <- 'https://docs.google.com/spreadsheet/pub?key=0AsJDXPO0ATU2dGg2cDk1bXpoMFVhYXNFY2FDdEFvcXc&single=true&gid=0&output=csv'
sht <- getURL(myUrl)
sht
dat <- read.csv(textConnection(sht))
dat
sht <- getURL(myUrl)
dat <- read.csv(textConnection(sht))
dat
sht <- getURL(myUrl)
dat <- read.csv(textConnection(sht))
dat
dat
sht <- getURL(myUrl)
dat <- read.csv(textConnection(sht))
dat
sht <- getURL(myUrl)
dat <- read.csv(textConnection(sht))
dat
sht <- getURL(myUrl)
sht
myUrl
sht <- getURL(myUrl)
dat <- read.csv(textConnection(sht))
dat
sht <- getURL(myUrl)
dat <- read.csv(textConnection(sht))
dat
sht <- getURL(myUrl)
dat <- read.csv(textConnection(sht))
dat
# get data
sht <- getURL(myUrl)
dat <- read.csv(textConnection(sht))
dat
upper_left <- function(d){gvisLineChart(d,
xvar = 'Time',
yvar = 'X..User.Growth..Q.',
options = list(), chartid)}
upper_left(dat)
upper_left <- function(d){gvisLineChart(d,
xvar = 'Time',
yvar = 'X..User.Growth..Q.',
options = list(width=400,
height=400
))}
upper_left(dat)
print(upper_left(dat))
plot(upper_left(dat))
upper_left <- function(data){gvisLineChart(data,
xvar = 'Time',
yvar = 'X..User.Growth..Q.',
options = list(width=650,
height=500,
legend=FALSE,
title='Quarterly User Growth'
))}
plot(upper_left(dat))
upper_left <- function(data){
gvisLineChart(data,
xvar = 'Time',
yvar = 'X..User.Growth..Q.',
options = list(width=650,
height=500,
legend=FALSE,
title='Quarterly User Growth',
titleTextStyle="{color:'black', fontSize:18}",
hAxis.format={format:'MMM d'}
))}
plot(upper_left(dat))
upper_left <- function(data){
gvisLineChart(data,
xvar = 'Time',
yvar = 'X..User.Growth..Q.',
options = list(width=650,
height=500,
legend=FALSE,
title='Quarterly User Growth',
titleTextStyle="{color:'black', fontSize:18}",
hAxis={format:'MMM d'}
))}
plot(upper_left(dat))
upper_left <- function(data){
gvisLineChart(data,
xvar = 'Time',
yvar = 'X..User.Growth..Q.',
options = list(width=650,
height=500,
legend=FALSE,
title='Quarterly User Growth',
titleTextStyle="{color:'black', fontSize:18}",
hAxis="{format:'MMM d'}"
))}
plot(upper_left(dat))
upper_left <- function(data){
gvisLineChart(data,
xvar = 'Time',
yvar = 'X..User.Growth..Q.',
options = list(width=650,
height=500,
legend=FALSE,
title='Quarterly User Growth',
titleTextStyle="{color:'black', fontSize:18}",
hAxis="{format:'MM d'}"
))}
plot(upper_left(dat))
head(dat)
head(dat$Time)
dat$Time <- strptime(dat$Time, format= "MM/DD/YYYY HH:MM:SS")
dat$Time
sht <- getURL(myUrl)
dat <- read.csv(textConnection(sht))
dat
strptime(dat$Time, format= "MM/DD/YYYY HH:MM:SS")
strptime(dat$Time, format= "MM/DD/YYYY HH:MI:SS")
type(dat$Time)
class(dat$Time)
strptime(dat$Time, format= "%m/%d/%Y %H:%M:%s")
strptime(dat$Time, format= "%m/%d/%Y %H:%M:%S")
dat$Time <- strptime(dat$Time, format= "%m/%d/%Y %H:%M:%S")
plot(upper_left(dat))
upper_left <- function(data){
gvisLineChart(data,
xvar = 'Time',
yvar = 'X..User.Growth..Q.',
options = list(width=650,
height=500,
legend=FALSE,
title='Quarterly User Growth',
titleTextStyle="{color:'black', fontSize:18}",
hAxis="{format:'HH MM'}"
))}
plot(upper_left(dat))
sht <- getURL(myUrl)
dat <- read.csv(textConnection(sht))
dat$Time <- strptime(dat$Time, format= "%m/%d/%Y %H:%M:%S")
upper_left <- function(data){
gvisLineChart(data,
xvar = 'Time',
yvar = 'X..User.Growth..Q.',
options = list(width=650,
height=500,
legend=FALSE,
title='Quarterly User Growth',
titleTextStyle="{color:'black', fontSize:18}",
hAxis="{format:'HH MM'}"
))}
plot(upper_left(dat))
upper_left <- function(data){
gvisLineChart(data,
xvar = 'Time',
yvar = 'X..User.Growth..Q.',
options = list(width=650,
height=500,
legend=FALSE,
title='Quarterly User Growth',
titleTextStyle="{color:'black', fontSize:18}",
hAxis="{format:'HH MI'}"
))}
plot(upper_left(dat))
upper_left <- function(data){
gvisLineChart(data,
xvar = 'Time',
yvar = 'X..User.Growth..Q.',
options = list(width=650,
height=500,
legend=FALSE,
title='Quarterly User Growth',
titleTextStyle="{color:'black', fontSize:18}",
hAxis="{format:'HH m'}"
))}
plot(upper_left(dat))
library("ggplot2")
library("plyr")
library("bigvis")
#library("bigmemory")
pData <- read.csv("/Users/JL/Box Sync/CUNY/datasets/all_PLUTO_data.csv")
all_pluto_data_2014 <- pData
all_pluto_data_2014[all_pluto_data_2014 == 0] <- NA
all_pluto_data_2014 <- all_pluto_data_2014[complete.cases(all_pluto_data_2014),]
autoplot(assessed_value_per_floor) + xlim(1930, 1960) + ylim(0, 125000) +
xlab("Year") + ylab("Average Assessed Value Per Floor")
all_pluto_data_2014$ValuePerFloor <- (all_pluto_data_2014$AssessTot/all_pluto_data_2014$NumFloors)
head(all_pluto_data_2014)
assessed_value_per_floor <- condense(bin(all_pluto_data_2014$YearBuilt, 5),
z=all_pluto_data_2014$ValuePerFloor)
autoplot(assessed_value_per_floor) + xlim(1930, 1960) + ylim(0, 125000) +
xlab("Year") + ylab("Average Assessed Value Per Floor")
all_pluto_data_2014$ValuePerFloor <- (all_pluto_data_2014$AssessTot/all_pluto_data_2014$NumFloors)
head(all_pluto_data_2014)
assessed_value_per_floor <- condense(bin(all_pluto_data_2014$YearBuilt, 5),
z=all_pluto_data_2014$ValuePerFloor)
assessed_value_per_floor <- condense(bin(all_pluto_data_2014$YearBuilt, 5),
z=all_pluto_data_2014$ValuePerFloor)
pluto.df <- pData
q1_sub <- select(pluto.df, YearBuilt)
q1_sub <- filter(q1_sub, YearBuilt >= 1850)
q1_sub <- select(pluto.df, YearBuilt)
library(dplyr)
install.packages(dplyr)
install.packages('dplyr')
q1_sub <- select(pluto.df, YearBuilt)
q1_sub <- filter(q1_sub, YearBuilt >= 1850)
library(dplyr)
library(dplyr)
library(ggplot2)
q1_sub <- select(pluto.df, YearBuilt)
library(dplyr)
library(googlVis)
library(googleVis)
demo(goolgeVis)
demo('goolgeVis')
demo('googleVis')
setwd('/Users/JL/Box Sync/CUNY/CUNY_IS608/lecture4/hw3_sample')
library('shiny')
runApp()
runApp()
runApp()
